{{- range $service, $config := .Values }}
{{- if ne $service "global" }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Release.Namespace }}
  name: {{ $service }}
  labels:
    helm.sh/chart: {{ printf "%s-%s" $.Chart.Name $.Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
    app.kubernetes.io/name: {{ $service }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $service }}
  replicas: {{ $config.replicas }}
  {{- if or ( eq $service "express" ) ( eq $service "skeda" ) }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 50%
  {{- end }}
  template:
    metadata:
      annotations:
        {{- if and ( $.Values.global.enable_metrics ) ( or ( eq $service "express" ) ( eq $service "skeda" ) ) }}
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '9090'
        {{- else }}
        prometheus.io/scrape: 'false'
        {{- end }}
        supplystack.io/env: {{ $.Values.global.env }}
        supplystack.io/customer: {{ $.Values.global.customer }}
        {{- if $.Values.global.datadog }}
        ad.datadoghq.com/tags: '{"env": "{{ $.Values.global.env }}", "service":"controltower", "source":"{{ $service }}", 
                                  "customer": "{{ $.Values.global.customer }}"}'
        ad.datadoghq.com/{{ $service }}.logs: '[{"service":"controltower", "source":"{{ $service }}"}]'
        {{- end }}
      labels:
        app.kubernetes.io/name: {{ $service }}
    spec:
      {{- if eq $service "skeda" }}
      terminationGracePeriodSeconds: 43200
      {{- end }}
      {{- if eq $.Values.global.env "prod" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - {{ $service }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
      {{- end }}
      automountServiceAccountToken: false
      enableServiceLinks: false
      {{- if ne $.Values.global.env "prod" }}
      nodeSelector:
        lifecycle: Ec2Spot-m4-m5
      tolerations:
      - key: spotInstance
        operator: Equal
        value: tolerate
        effect: NoSchedule
      {{- end }}
      initContainers:
      - name: {{ $service }}-init
        image: {{ $.Values.global.image.repository }}:{{ $.Values.global.image.tag }}
        env:
        - name: CT_ENTRY
          {{- if eq $service "express" }}
          value: EXPRESS_INIT
          {{- end }}
          {{- if eq $service "skeda" }}
          value: SKEDA_INIT
          {{- end }}
          {{- if eq $service "socket" }}
          value: SOCKET_INIT
          {{- end }}
        - name: CONSUL_ACL_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ $.Values.global.secret }}
              key: CONSUL_ACL_TOKEN
        - name: CONSUL_HOST
          value: consul-redirector.consul
        - name: CONSUL_KEY
          value: {{ $.Values.global.env }}/controltower/{{ $.Values.global.customer }}
        {{- range $.Values.global.extra_secrets }}
        - name: {{ . }}
          valueFrom:
            secretKeyRef:
              name: {{ $.Values.global.secret }}
              key: {{ . }}
        {{- end }}
        {{- range $.Values.global.extra_env }}
        - name: {{ .name }}
          value: {{ .value }}
        {{- end }}
        {{- if or (eq $service "express") (eq $service "skeda") }}
        resources:
          requests:
            cpu: 100m
            memory: {{ $config.mem_limit_init | default "1024Mi" }}
          limits:
            memory: {{ $config.mem_limit_init | default "1024Mi" }}
        {{- end }}
        {{- if eq $service "socket" }}
        resources:
          requests:
            cpu: 100m
            memory: {{ $config.mem_limit | default "512Mi" }}
          limits:
            memory: {{ $config.mem_limit | default "512Mi" }}
        {{- end }}
      containers:
      - name: {{ $service }}
        image: {{ $.Values.global.image.repository }}:{{ $.Values.global.image.tag }}
        {{- if or ( eq $service "express" ) ( eq $service "socket" ) }}
        ports:
        - name: http
          {{- if eq $service "express" }}
          containerPort: 8080
          {{- end }}
          {{- if eq $service "socket" }}
          containerPort: 8081
          {{- end }}
        {{- end }}
        env:
        - name: CT_ENTRY
          {{- if eq $service "express" }}
          value: EXPRESS_START
          {{- end }}
          {{- if eq $service "skeda" }}
          value: SKEDA_START
          {{- end }}
          {{- if eq $service "socket" }}
          value: SOCKET_START
          {{- end }}
        - name: CONSUL_ACL_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ $.Values.global.secret }}
              key: CONSUL_ACL_TOKEN
        - name: CONSUL_HOST
          value: consul-redirector.consul
        - name: CONSUL_KEY
          value: {{ $.Values.global.env }}/controltower/{{ $.Values.global.customer }}
        {{- if $.Values.global.enable_tracing }}
        - name: OTEL_RESOURCE_ATTRIBUTES
          value: service.name={{ $.Values.global.env }}-controltower-{{ $.Values.global.customer }}-{{ $service }},job={{ $.Values.global.env }}-controltower-{{ $.Values.global.customer }}/{{ $service }}
        - name: OTEL_METRICS_EXPORTER
          value: none
        - name: OTEL_TRACES_EXPORTER
          value: otlp
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: OTEL_EXPORTER_OTLP_ENDPOINT
          value: http://$(HOST_IP):4317
        {{- end }}
        {{- range $.Values.global.extra_secrets }}
        - name: {{ . }}
          valueFrom:
            secretKeyRef:
              name: {{ $.Values.global.secret }}
              key: {{ . }}
        {{- end }}
        {{- range $.Values.global.extra_env }}
        - name: {{ .name }}
          value: {{ .value }}
        {{- end }}
        {{- if or (eq $service "express") (eq $service "skeda") }}
        resources:
          requests:
            cpu: 100m
            {{- if eq $.Values.global.env "dev" }}
            memory: {{ $config.mem_limit | default "512Mi" }}
            {{- else }}
            memory: {{ $config.mem_limit | default "1024Mi" }}
            {{- end }}
          limits:
            {{- if eq $.Values.global.env "dev" }}
            memory: {{ $config.mem_limit | default "512Mi" }}
            {{- else }}
            memory: {{ $config.mem_limit | default "1024Mi" }}
            {{- end }}
        {{- if not $.Values.global.probes_disabled }}
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          periodSeconds: 15
          timeoutSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 15
          timeoutSeconds: 10
        {{- end }}
        {{- end }}
        {{- if eq $service "socket" }}
        resources:
          requests:
            cpu: 100m
            memory: {{ $config.mem_limit | default "512Mi" }}
          limits:
            memory: {{ $config.mem_limit | default "512Mi" }}
        {{- if not $.Values.global.probes_disabled }}
        readinessProbe:
          exec:
            command:
            - /argus/node_modules/.bin/coffee
            - /argus/scripts/socketioHealthCheck.coffee
          periodSeconds: 20
          timeoutSeconds: 10
        livenessProbe:
          exec:
            command:
            - /argus/node_modules/.bin/coffee
            - /argus/scripts/socketioHealthCheck.coffee
          initialDelaySeconds: 300
          periodSeconds: 20
          timeoutSeconds: 10
        {{- end }}
        {{- end }}
{{- end }}
{{- end }}

